import { Event, EventEmitter } from '../../stencil-public-runtime';
import { FormValues, FormTouched, FormErrors, FormSubmit } from './form-declaration';
export declare class Form {
  el: any;
  private controls;
  private fields;
  /**
   * Initial field values of the form. It is an object with keys pointing to field name
   */
  initialValues?: any;
  /** Validate the form's values with an async function.
   * Should return a Promise which resolves to an errors object.
   * The keys in the errors object must match with the field names.
   */
  validate?: any;
  /**
   * Schema to render Dynamic Form. Contains an array of fields pointing to each form control.
   * Please see the usage reference for examples.
   */
  formSchema?: any;
  /**
   * YUP based validation schema for handling validation
   */
  validationSchema?: any;
  /** Tells Form to validate the form on each input's onInput event */
  validateOnInput?: boolean;
  /** Tells Form to validate the form on each input's onBlur event */
  validateOnBlur?: boolean;
  /** The number of milliseconds to delay before doing validation on Input */
  wait: number;
  /**
   * Id to uniquely identify the Form. If not set, a random Id will be generated.
   */
  formId: any;
  values: FormValues;
  touched: FormTouched<FormValues>;
  errors: FormErrors<FormValues>;
  formValidationSchema: any;
  formInitialValues: any;
  /**
   * fwFormValuesChanged - event that gets emitted when values change.
   */
  fwFormValuesChanged: EventEmitter;
  private debouncedHandleInput;
  private handleInputListener;
  private handleBlurListener;
  private handleChangeListener;
  private prevValues;
  componentWillLoad(): Promise<void>;
  formSchemaHandler(formSchema: any): Promise<void>;
  initialValuesHandler(initialValues: any): Promise<void>;
  valuesChangeHandler(values: any): void;
  handleFormSchemaAndInitialValuesChange(formSchema: any, initialValues: any): Promise<void>;
  componentDidLoad(): void;
  componentWillUpdate(): void;
  handleSlotChange(): void;
  disconnectedCallback(): void;
  handleSubmit: (event: Event) => Promise<FormSubmit>;
  handleReset: (event?: Event) => Promise<void>;
  handleValidation: () => Promise<void>;
  handleInput: (event: Event) => Promise<void>;
  handleBlur: (event: Event) => Promise<void>;
  setFocus: (field: any) => void;
  setFocusOnError: () => void;
  private getFormControls;
  private passPropsToChildren;
  private passPropsToChild;
  private composedUtils;
  setFieldValue(field: string, value: any, shouldValidate?: boolean): Promise<void>;
  setFieldErrors(errorObj: FormErrors<FormValues>): Promise<void>;
  /**
   * getValues
   * @returns An Object containing values and serializedValues.
   * serializedValues are those that contains the transformed values based on field type.
   * 1. For Number and Decimal: returns floating point number of value or undefined.
   * 2. For Date: returns value as ${year}-${month}-${date} or undefined.
   * 3. For Relationship : returns an array of values or value.
   */
  getValues(): Promise<{
    values: FormValues;
    serializedValues: FormValues;
  }>;
  doSubmit(e: any): Promise<FormSubmit>;
  doReset(e: any): Promise<void>;
  render(): any;
}
